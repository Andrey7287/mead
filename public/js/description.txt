0. Устаревший синтаксис
 
1. Под jQuerry можно писать плагин, который будет работать как нативный метод. Например $('.selector').validator('email'); А так не вижу пользы от её применея, напротив код усложняется.

2. В конструкторах используется функция isEmptyValue, вероятно тоже написанная на jQuerry, которую вы забыли приложить. То что весь код ломается из за её отсутствия не есть хорошо. Опять таки на нативном JS пустая ли строка можно проверить гораздо проще - element.value.trim(). Такж есть функция isCellPhone

3. Очень много дублирования кода. Метод set при использовании прототипного наследования можно сделать доступным в каждом классе. Праверку на наличие елемента рациональнее было бы делать в екземпляре Validator`a. toString при сохранении имени в переменной тоже можно вынести в прототип.

4. Убрав дублирование в паттернах остаётся всего 1 полезный метод, который по логике должен находится в конструкторе Validator в виде приватного метода. То есть Validator при вызове должен явно возвращать объект с открытыми методами и сохранять в замыкании закрытые. Итого имеем 1 конструктор, 1 вызов.

Использование: 
var validator = new Validator();

validator('selector1', 'email');
validator('selector2', 'pass');

Это по архитектуре в целом. Теперь по коду.

Функция NumberPattern. В тернарном операторе req_length = написанно в условии, не обязательно дублировать в выражениях. Можно было обойтись без вложенных if. К слову в других патернах эти вещи реализованны по другому, отсутсвие единного стиля также можно отнести к минусам.
Для изменения цвета лучше использовать css классы.   